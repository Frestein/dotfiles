#!/usr/bin/env python3

"""
This script emulates "unique application" functionality on Linux. When starting
playback with this script, it will try to reuse an already running instance of
mpv (but only if that was started with umpv). Other mpv instances (not started
by umpv) are ignored, and the script doesn't know about them.

This takes filenames as arguments and supports --profile option for mpv.
Custom options (other than --profile) can't be used. If mpv is already running,
the files passed to umpv are appended to mpv's internal playlist.

If a file does not exist or is otherwise not playable, mpv will skip the playlist
entry when attempting to play it (from the GUI perspective, it's silently ignored).
"""

import errno
import os
import shlex
import socket
import string
import subprocess
import sys

args = sys.argv[1:]
profile = None
files = []
i = 0

while i < len(args):
    arg = args[i]
    if arg == "--profile":
        if i + 1 < len(args):
            profile = args[i + 1]
            i += 2
        else:
            print("Error: --profile requires a value", file=sys.stderr)
            sys.exit(1)
    elif arg.startswith("--profile="):
        profile = arg.split("=", 1)[1]
        i += 1
    else:
        files.append(arg)
        i += 1


def is_url(filename):
    parts = filename.split("://", 1)
    if len(parts) < 2:
        return False
    allowed_symbols = string.ascii_letters + string.digits + "_"
    return all(c in allowed_symbols for c in parts[0])


def make_abs(filename):
    if not is_url(filename):
        return os.path.abspath(filename)
    return filename


files = [make_abs(f) for f in files]

SOCK = os.path.join(os.getenv("XDG_RUNTIME_DIR", os.getenv("HOME")), ".umpv_socket")

sock = None
try:
    sock = socket.socket(socket.AF_UNIX)
    sock.connect(SOCK)
except socket.error as e:
    if e.errno in (errno.ECONNREFUSED, errno.ENOENT):
        sock = None
    else:
        raise

if sock:
    for f in files:
        f = f.replace("\\", "\\\\").replace('"', '\\"').replace("\n", "\\n")
        sock.send(f'raw loadfile "{f}" append\n'.encode("utf-8"))
else:
    opts = shlex.split(os.getenv("MPV") or "mpv")
    if profile:
        opts.append(f"--profile={profile}")
    opts += ["--no-terminal", "--force-window", f"--input-ipc-server={SOCK}", "--"]
    opts += files

    subprocess.check_call(opts)
