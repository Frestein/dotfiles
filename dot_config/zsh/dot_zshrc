#!/usr/bin/env zsh

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

# fish as interactive shell
if [[ $(ps -o comm= -p $PPID) != "fish" && $SHLVL -eq 1 && -o login ]]; then
    exec fish --login
elif [[ $(ps -o comm= -p $PPID) != "fish" && $SHLVL -eq 1 ]]; then
    exec fish
fi

# --------------------------zsh-defer-------------------------- #

source /usr/share/zsh/plugins/zsh-defer/zsh-defer.plugin.zsh

# --------------------Environment Variables-------------------- #

# ohmyzsh
ZSH=/usr/share/oh-my-zsh/

ZSH_CACHE_DIR="$HOME/.cache/oh-my-zsh"
if [[ ! -d "$ZSH_CACHE_DIR" ]]; then
    mkdir "$ZSH_CACHE_DIR"
fi

# Python (omz)
export PYTHON_AUTO_VRUN=true
export PYTHON_VENV_NAME=".venv"

# zsh-vi-mode
export ZVM_KEYTIMEOUT=0.03
export ZVM_VI_HIGHLIGHT_FOREGROUND=#FBF1C7
export ZVM_VI_HIGHLIGHT_BACKGROUND=#423E3C

# forgit
export FORGIT_COPY_CMD="wl-copy"

# ----------------------------Prompt--------------------------- #

eval "$(oh-my-posh init zsh --config="$HOME/.config/oh-my-posh/themes/bubblesline.omp.toml")"

# -------------------------lazy-loading------------------------ #

## ---- Load plugins ---- ##
zsh-defer source /usr/share/zsh/plugins/zsh-vi-mode/zsh-vi-mode.plugin.zsh
zsh-defer source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.plugin.zsh
zsh-defer source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.plugin.zsh
zsh-defer source /usr/share/zsh/plugins/fzf-tab-git/fzf-tab.plugin.zsh
zsh-defer source /usr/share/zsh/plugins/forgit/forgit.plugin.zsh

## ---- Completions & Initializations ---- ##
zsh-defer eval "$(zoxide init zsh)"
zsh-defer eval "$(fzf --zsh)"
zsh-defer eval "$(atuin init zsh)"
zsh-defer eval "$(batpipe)"
zsh-defer eval "$(direnv hook zsh)"

# ---------------------------ohmyzsh--------------------------- #

plugins=(
    command-not-found
    docker-compose
    extract
    eza
    git-auto-fetch
    python
    ssh
)

zstyle ':completion:*' cache-path "$XDG_CACHE_HOME/zsh/completion"
zstyle ':omz:plugins:eza' git-status yes
zstyle ':omz:plugins:eza' header yes
zstyle ':omz:plugins:eza' icons yes
zstyle ':omz:plugins:ssh-agent' quiet yes
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'eza -T --color=always --icons $realpath'
zstyle ':fzf-tab:complete:z:*' fzf-preview 'eza -T --color=always --icons $realpath'
zstyle ':fzf-tab:*' use-fzf-default-opts yes

zstyle ':omz:update' mode disabled

source "$ZSH/oh-my-zsh.sh"

unset plugins

# --------------------------Options---------------------------- #

# Beam cursor on startup
echo -ne '\e[5 q'

autoload -U compinit && compinit

## ---- Jumping between prompts (foot) ---- ##
function precmd() {
    print -Pn "\e]133;A\e\\"
}

## ---- On-demand rehash ---- ##
zshcache_time="$(date +%s%N)"

autoload -Uz add-zsh-hook

function rehash_precmd() {
    if [[ -e /var/cache/zsh/pacman ]]; then
        local paccache_time="$(date -r /var/cache/zsh/pacman +%s%N)"
        if ((zshcache_time < paccache_time)); then
            rehash
            zshcache_time="$paccache_time"
        fi
    fi
}

add-zsh-hook -Uz precmd rehash_precmd

## ---- zvm ----- ##

# omp integration
function _omp_redraw-prompt() {
    local precmd
    for precmd in "${precmd_functions[@]}"; do
        "$precmd"
    done

    zle .reset-prompt
}

export POSH_VI_MODE="I"

function zvm_after_select_vi_mode() {
    case $ZVM_MODE in
    $ZVM_MODE_NORMAL)
        POSH_VI_MODE="N"
        ;;
    $ZVM_MODE_INSERT)
        POSH_VI_MODE="I"
        ;;
    $ZVM_MODE_VISUAL)
        POSH_VI_MODE="V"
        ;;
    $ZVM_MODE_VISUAL_LINE)
        POSH_VI_MODE="V-L"
        ;;
    $ZVM_MODE_REPLACE)
        POSH_VI_MODE="R"
        ;;
    esac
    _omp_redraw-prompt
}

# system clipboard

if [[ $(uname) = "Darwin" ]]; then
    host_session="mac"
elif [[ "$XDG_SESSION_TYPE" == "wayland" ]]; then
    host_session="wayland"
else
    host_session="x11"
fi

function cbread() {
    if [[ $host_session == "mac" ]]; then
        pbcopy
    elif [[ $host_session == "wayland" ]]; then
        wl-copy
    else
        xclip -selection primary -i -f | xclip -selection secondary -i -f | xclip -selection clipboard -i
    fi
}

function cbprint() {
    if [[ $host_session == "mac" ]]; then
        pbpaste
    elif [[ $host_session == "wayland" ]]; then
        wl-paste
    else
        if x=$(xclip -o -selection clipboard 2>/dev/null); then
            echo -n $x
        elif x=$(xclip -o -selection primary 2>/dev/null); then
            echo -n $x
        elif x=$(xclip -o -selection secondary 2>/dev/null); then
            echo -n $x
        fi
    fi
}

function my_zvm_vi_yank() {
    zvm_vi_yank
    echo -en "${CUTBUFFER}" | cbread
}

function my_zvm_vi_delete() {
    zvm_vi_delete
    echo -en "${CUTBUFFER}" | cbread
}

function my_zvm_vi_change() {
    zvm_vi_change
    echo -en "${CUTBUFFER}" | cbread
}

function my_zvm_vi_change_eol() {
    zvm_vi_change_eol
    echo -en "${CUTBUFFER}" | cbread
}

function my_zvm_vi_put_after() {
    CUTBUFFER=$(cbprint)
    zvm_vi_put_after
}

function my_zvm_vi_put_before() {
    CUTBUFFER=$(cbprint)
    zvm_vi_put_before
}

# -------------------------Key Bindings------------------------ #

function zvm_after_lazy_keybindings() {
    zvm_bindkey vicmd '^\' autosuggest-accept
    zvm_bindkey vicmd '^Y' accept-line

    # system clipboard
    zvm_define_widget my_zvm_vi_yank
    zvm_define_widget my_zvm_vi_delete
    zvm_define_widget my_zvm_vi_change
    zvm_define_widget my_zvm_vi_change_eol
    zvm_define_widget my_zvm_vi_put_after
    zvm_define_widget my_zvm_vi_put_before

    zvm_bindkey visual 'y' my_zvm_vi_yank
    zvm_bindkey visual 'd' my_zvm_vi_delete
    zvm_bindkey visual 'x' my_zvm_vi_delete
    zvm_bindkey vicmd 'C' my_zvm_vi_change_eol
    zvm_bindkey visual 'c' my_zvm_vi_change
    zvm_bindkey vicmd 'p' my_zvm_vi_put_after
    zvm_bindkey vicmd 'P' my_zvm_vi_put_before
}

function zvm_after_init() {
    zvm_bindkey viins '^R' fzf-history-widget
    zvm_bindkey viins '^\' autosuggest-accept
    zvm_bindkey viins '^Y' accept-line
}

# ---------------------------Imports--------------------------- #
zsh-defer [ -f "$XDG_CONFIG_HOME/bash/functions" ] && . "$XDG_CONFIG_HOME/bash/functions"
zsh-defer [ -f "$XDG_CONFIG_HOME/bash/aliases" ] && . "$XDG_CONFIG_HOME/bash/aliases"
zsh-defer [ -f "$XDG_CONFIG_HOME/sh/aliases" ] && . "$XDG_CONFIG_HOME/sh/aliases"

# --------------------------Functions-------------------------- #

# ---------------------------Aliases--------------------------- #
